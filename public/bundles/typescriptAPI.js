(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){


SupCore.system.registerPlugin("typescriptAPI", "fMouseInput", {
  code: "/// <reference path=\"../index.d.ts\" />\r\n/// <reference path=\"Sup.d.ts\" />\r\n\r\nclass fMouseInput extends Sup.ActorComponent {\r\n\r\n  /**\r\n  * @param actor - The API actor to create the component on.\r\n  */\r\n  constructor(actor: Sup.Actor) {\r\n    super(actor);\r\n    this.actor.fMouseInput = this;\r\n\r\n    this[\"__inner\"] = new SupEngine.componentClasses[\"fMouseInput\"](this.actor[\"__inner\"]);\r\n    this[\"__inner\"].setOuter(this);\r\n    // __inner is the component instance on the engine side (of type \"MouseInput extends SupEngine.ActorComponent\").\r\n    \r\n    this.emitter = new window[\"EventEmitter\"]();\r\n    this.emitter.on(\"newListener\", this._onNewListener);\r\n    this.emitter.on(\"removeListener\", this._onRemoveListener);\r\n\r\n    if (actor.camera != null) {\r\n      this._camera = actor.camera;\r\n      this._ray = new Sup.Math.Ray();\r\n    }\r\n  }\r\n\r\n  // ----------------------------------------\r\n\r\n  /**\r\n  * The ray used for the intersection check.\r\n  * Set and updated by the component that is on the actor with the camera component.\r\n  * On other components, it is set to the ray on the camera component's\r\n  */\r\n  private _ray: Sup.Math.Ray;\r\n\r\n  private _camera: Sup.Camera;\r\n\r\n  // only called by the Engine conmponent\r\n  setCameraActorName(name: string): void {\r\n    const actor: Sup.Actor = Sup.getActor(name);\r\n    \r\n    if (actor == null) {\r\n      console.error(\"fMouseInput.setCameraActorName(): actor with name '\"+name+\"' isn't found.\");\r\n      return;\r\n    }\r\n    \r\n    if (actor.camera == null) {\r\n      console.error(\"fMouseInput.setCameraActorName(): actor with name '\"+name+\"' has no Camera component.\");\r\n      return;\r\n    }\r\n    \r\n    this.setCameraComponent(actor.camera);\r\n  }\r\n\r\n  /**\r\n  * The camera component the actor should be visible from.\r\n  */\r\n  setCameraComponent(camera: Sup.Camera): void {\r\n    let actor: Sup.Actor = camera.actor;\r\n\r\n    if (actor == null) { // unlikely to happend but better be safe\r\n      console.error(\"fMouseInput.setCameraComponent(): the parameter's value does not appear to be an actor component.\", camera);\r\n      return;\r\n    }\r\n\r\n    this._camera = actor.camera;\r\n\r\n    if (actor.fMouseInput == null)\r\n      new fMouseInput(actor);\r\n\r\n    this._ray = actor.fMouseInput[\"_ray\"];\r\n  }\r\n\r\n  getCameraComponent(): Sup.Camera {\r\n    return this._camera;\r\n  };\r\n\r\n  // ----------------------------------------\r\n\r\n  /**\r\n  * The event emitter on which mouse input events are emitted (of type EventEmitter).\r\n  */\r\n  emitter: any; // can't define as EventEmitter here...\r\n\r\n  /**\r\n  * The list of event name's listened to (except the mouse events)\r\n  */\r\n  private _eventsListenedTo = new Array<string>();\r\n\r\n  /**\r\n  * Tell whether the `mouseMove` event has listeners and should be emitted.\r\n  */\r\n  private _emitMouseMove = false;\r\n\r\n  /**\r\n  * Listener for the `newListener` event.\r\n  * @param event The event name.\r\n  * @param listener The listener function.\r\n  */\r\n  private _onNewListener = (event: string, listener: Function) => { // set as an arrow function so that 'this' stays the component\r\n    if (this._eventsListenedTo.indexOf(event) === -1) {\r\n      this._eventsListenedTo.push(event);\r\n      \r\n      if (event === \"mouseMove\")\r\n        this._emitMouseMove = true;\r\n      else if (\r\n        event !== \"mouseEnter\" && event !== \"mouseExit\" \r\n        && event !== \"newListener\" && event !== \"removeListener\"\r\n        && fMouseInput.behaviorByEvents[event] == null\r\n      )\r\n        console.error(`fMouseInput: You listen to the '${event}' event on the actor named '${this.actor.getName()}' but there is no data for such event. Make sure you didn't made a typo, or add the corresponding data to the 'fMouseInput.behaviorByEvents' object.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n  * Listener for the `removeListener` event.\r\n  * @param event The event name.\r\n  * @param listener The listener function.\r\n  */\r\n  private _onRemoveListener = (event: string, listener: Function) => {\r\n    // the removeListener event is emitted AFTER a listener has been removed\r\n    if (this.emitter.listeners(event).length === 0) {\r\n      // there is no more listener for that event\r\n      const id = this._eventsListenedTo.indexOf(event);\r\n      if (id >= -1) {\r\n        this._eventsListenedTo.splice(id, 1);\r\n        \r\n        if (event === \"mouseMove\")\r\n          this._emitMouseMove = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  // ----------------------------------------\r\n\r\n  /**\r\n  * Tell which Sup.Input method and button id to check for each events.\r\n  */\r\n  static behaviorByEvents: { [event: string]: { functionName: string, buttonId: number } } = {\r\n    leftClickPressed: { functionName: \"wasMouseButtonJustPressed\", buttonId: 0 },\r\n    leftClickDown: { functionName: \"isMouseButtonDown\", buttonId: 0 },\r\n    leftClickReleased: { functionName: \"wasMouseButtonJustReleased\", buttonId: 0 },\r\n\r\n    middleClickPressed: { functionName: \"wasMouseButtonJustPressed\", buttonId: 1 },\r\n    middleClickDown: { functionName: \"isMouseButtonDown\", buttonId: 1 },\r\n    middleClickReleased: { functionName: \"wasMouseButtonJustReleased\", buttonId: 1 },\r\n\r\n    rightClickPressed: { functionName: \"wasMouseButtonJustPressed\", buttonId: 2 },\r\n    rightClickDown: { functionName: \"isMouseButtonDown\", buttonId: 2 },\r\n    rightClickReleased: { functionName: \"wasMouseButtonJustReleased\", buttonId: 2 },\r\n\r\n    wheelUp: { functionName: \"isMouseButtonDown\", buttonId: 5 },\r\n    wheelDown: { functionName: \"isMouseButtonDown\", buttonId: 6 }\r\n  };\r\n\r\n  /**\r\n  * Tell wether the mouse pointer is currently over the actor.\r\n  */\r\n  isMouseOver: boolean = false;\r\n\r\n  // called by the engine instance\r\n  private _update(): void {\r\n    if (this.actor.camera != null) // this component is on the same actor as the camera\r\n      this._ray.setFromCamera(this._camera, Sup.Input.getMousePosition());\r\n        \r\n    else if (this._ray != null && this._eventsListenedTo.length > 0) { // this component is on an actor to be checked\r\n      const hit = this._ray.intersectActor(this.actor)[0];\r\n\r\n      if (hit != null) { // the mouse is hover the actor's renderer this frame\r\n        if(this.isMouseOver === false) {\r\n          this.isMouseOver = true;\r\n          this.emitter.emit(\"mouseEnter\");\r\n        }\r\n      }\r\n      else if (this.isMouseOver === true) {\r\n        this.isMouseOver = false;\r\n        this.emitter.emit(\"mouseExit\");\r\n      }\r\n\r\n      if (this.isMouseOver === true) {\r\n        if (this._emitMouseMove === true) {\r\n          const mouseDelta = Sup.Input.getMouseDelta();\r\n          if (mouseDelta.x !== 0 || mouseDelta.y !== 0)\r\n            this.emitter.emit(\"mouseMove\", mouseDelta);\r\n        }\r\n\r\n        for (const event of this._eventsListenedTo) {\r\n          const behavior = fMouseInput.behaviorByEvents[event];\r\n          if (behavior != null && Sup.Input[behavior.functionName](behavior.buttonId) === true)\r\n            this.emitter.emit(event);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  destroy(): void {\r\n    this._camera = null;\r\n    this._ray = null;\r\n    this._eventsListenedTo = null;\r\n    this._emitMouseMove = false;\r\n    this.isMouseOver = false;\r\n    this.emitter.removeAllListeners();\r\n    this[\"__inner\"]._destroy();\r\n    this[\"__inner\"] = null;\r\n    this.actor.fMouseInput = null;\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nwindow[\"fMouseInput\"] = fMouseInput;\r\n".replace(/reference path/gi, ""),
  defs: "// fMouseInput plugin\r\n// https://github.com/florentpoujol/superpowers-game-fmouseinput-plugin\r\n// Allows for easy setup of interactions between the mouse and actors\r\n\r\ndeclare class fMouseInput extends Sup.ActorComponent {\r\n  constructor(actor: Sup.Actor);\r\n\r\n  setCameraActorName(name: string);\r\n  setCameraComponent(camera: Sup.Camera);\r\n  getCameraComponent(): Sup.Camera;\r\n  destroy(): void;\r\n  \r\n  emitter: EventEmitter;\r\n  isMouseOver: boolean;\r\n\r\n  static behaviorByEvents: { [event: string]: { functionName: string, buttonId: number } };\r\n}\r\n",
  exposeActorComponent: { propertyName: "fMouseInput", className: "fMouseInput" }
});

},{}]},{},[1]);
