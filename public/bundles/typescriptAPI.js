(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){



SupCore.system.registerPlugin("typescriptAPI", "fMouseInput", {
  code: "/// <reference path=\"../index.d.ts\" />\n/// <reference path=\"Sup.d.ts\" />\n\n\nclass fMouseInput extends Sup.ActorComponent {\n\n  /**\n  * @param actor - The API actor to create the component on.\n  */\n  constructor(actor: Sup.Actor) {\n    super(actor);\n    this.actor.fMouseInput = this;\n\n    this[\"__inner\"] = new SupEngine.componentClasses[\"fMouseInput\"](this.actor[\"__inner\"]);\n    this[\"__inner\"].setOuter(this);\n    // __inner is the component instance on the engine side (of type \"MouseInput extends SupEngine.ActorComponent\").\n    \n    this.emitter = new window[\"EventEmitter\"]();\n    this.emitter.on(\"newListener\", this._onNewListener);\n    this.emitter.on(\"removeListener\", this._onRemoveListener);\n\n    if (actor.camera != null) {\n      this._camera = actor.camera;\n      this._ray = new Sup.Math.Ray();\n    }\n  }\n\n  // ----------------------------------------\n\n  /**\n  * The ray used for the intersection check.\n  * Set and updated by the component that is on the actor with the camera component.\n  * On other components, it is set to the ray on the camera component's\n  */\n  private _ray: Sup.Math.Ray;\n\n  private _camera: Sup.Camera;\n\n  /**\n  * The camera component the actor should be visible from.\n  */\n  set camera(camera: Sup.Camera|Sup.Actor|string) {\n    let actor: Sup.Actor;\n    if (typeof camera === \"string\") {\n      const actorName = (camera as string);\n      actor = (Sup.getActor(actorName) as Sup.Actor);\n      if (actor == null) {\n        console.error(\"fMouseInput.camera setter: actor with name '\"+actorName+\"' not found.\");\n        return;\n      }\n    }\n    else {\n      if (camera[\"camera\"] != null) { // suppose actor\n        actor = (camera as Sup.Actor);\n      }\n      else if (camera[\"actor\"] != null) // suppose camera component\n        actor = (camera[\"actor\"] as Sup.Actor);\n      else {\n        // unlikely to happend but better be safe !\n        console.error(\"fMouseInput.camera setter: unable to do anything with the value.\", camera);\n        return;\n      }\n    }\n\n    if (actor.camera == null) {\n      console.error(\"fMouseInput.camera setter: actor with name '\"+actor.getName()+\"' has no Camera component.\");\n      return;\n    }\n\n    this._camera = actor.camera;\n    \n    if (actor.fMouseInput == null)\n      new fMouseInput(actor);\n\n    this._ray = actor.fMouseInput[\"_ray\"];\n  }\n\n  get camera(): Sup.Camera|Sup.Actor|string {\n    return this._camera; // actually always return a Sup.Camera instance\n  }\n\n  // ----------------------------------------\n\n  /**\n  * The event emitter on which mouse input events are emitted.\n  */\n  emitter: any; // can't define as EventEmitter here...\n\n  /**\n  * Adds the `listener` function for the specified `event`.\n  * @param event The event name.\n  * @param listener The listener function.\n  * @return The event emitter so that calls can be chained.\n  */\n  on(event: string, listener: Function) {\n    return this.emitter.on(event, listener);\n  }\n\n  /**\n  * Removes the `listener` function for the specified `event`.\n  * @param event The event name.\n  * @param listener The listener function.\n  * @return The event emitter so that calls can be chained.\n  */\n  off(event: string, listener: Function) {\n    return this.emitter.removeListener(event, listener);\n  }\n\n  // ----------------------------------------\n  \n  /**\n  * The list of event name's listened to.\n  */\n  private _events = new Array<string>();\n\n  /**\n  * Tell whether the `mouseMove` event has listeners and should be emitted.\n  */\n  private _emitMouseMove = false;\n\n  /**\n  * Listener for the `newListener` event.\n  * @param event The event name.\n  * @param listener The listener function.\n  */\n  private _onNewListener = (event: string, listener: Function) => { // set as an arrow function so that 'this' stays the component\n    if (this._events.indexOf(event) === -1) {\n      this._events.push(event);\n      \n      if (event === \"mouseMove\")\n        this._emitMouseMove = true;\n      else if (\n        event !== \"mouseEnter\" && event !== \"mouseExit\" \n        && event !== \"newListener\" && event !== \"removeListener\"\n        && fMouseInput.eventsData[event] == null\n      )\n        console.error(`fMouseInput: You listen to the '${event}' event on the actor named '${this.actor.getName()}' but there is no data for such event. Make sure you didn't made a typo, or add the corresponding data to the 'fMouseInput.eventsData' object.`);\n    }\n  };\n\n  /**\n  * Listener for the `removeListener` event.\n  * @param event The event name.\n  * @param listener The listener function.\n  */\n  private _onRemoveListener = (event: string, listener: Function) => {\n    // the removeListener event is emitted AFTER a listener has been removed\n    if (this.emitter.listeners(event).length === 0) {\n      // there is no more listener for that event\n      const id = this._events.indexOf(event);\n      if (id >= -1) {\n        this._events.splice(id, 1);\n        \n        if (event === \"mouseMove\")\n          this._emitMouseMove = false;\n      }\n    }\n  };\n\n  // ----------------------------------------\n\n  /**\n  * Tell which Sup.Input method and button id check for each events.\n  */\n  static eventsData: fMouseInput.EventsData = {\n\n    leftClickPressed: { functionName: \"wasMouseButtonJustPressed\", buttonId: 0 },\n    leftClickDown: { functionName: \"isMouseButtonDown\", buttonId: 0 },\n    leftClickReleased: { functionName: \"wasMouseButtonJustReleased\", buttonId: 0 },\n\n    middleClickPressed: { functionName: \"wasMouseButtonJustPressed\", buttonId: 1 },\n    middleClickDown: { functionName: \"isMouseButtonDown\", buttonId: 1 },\n    middleClickReleased: { functionName: \"wasMouseButtonJustReleased\", buttonId: 1 },\n\n    rightClickPressed: { functionName: \"wasMouseButtonJustPressed\", buttonId: 2 },\n    rightClickDown: { functionName: \"isMouseButtonDown\", buttonId: 2 },\n    rightClickReleased: { functionName: \"wasMouseButtonJustReleased\", buttonId: 2 },\n\n    wheelUp: { functionName: \"isMouseButtonDown\", buttonId: 5 },\n    wheelDown: { functionName: \"isMouseButtonDown\", buttonId: 6 }\n  };\n\n  /**\n  * Tell wether the mouse pointer is currently over the actor.\n  */\n  isMouseOver: boolean = false;\n\n  // called by the engine instance\n  private _update(): void {\n    if (this.actor.camera != null) // this component is on the same actor as the camera\n      this._ray.setFromCamera(this._camera, Sup.Input.getMousePosition());\n        \n    else if (this._ray != null && this._events.length > 0) { // this component is on an actor to be checked\n      const hit = this._ray.intersectActor(this.actor)[0];\n\n      if (hit != null) { // the mouse is hover the actor's renderer this frame\n        if(this.isMouseOver === false) {\n          this.isMouseOver = true;\n          this.emitter.emit(\"mouseEnter\");\n        }\n      }\n      else if (this.isMouseOver === true) {\n        this.isMouseOver = false;\n        this.emitter.emit(\"mouseExit\");\n      }\n\n      if (this.isMouseOver === true) {\n        if (this._emitMouseMove === true) {\n          const mouseDelta = Sup.Input.getMouseDelta();\n          if (mouseDelta.x !== 0 || mouseDelta.y !== 0)\n            this.emitter.emit(\"mouseMove\", mouseDelta);\n        }\n\n        for (const event of this._events) {\n          const data = fMouseInput.eventsData[event];\n          if (data != null && Sup.Input[data.functionName](data.buttonId) === true)\n            this.emitter.emit(event);\n        }\n      }\n    }\n  }\n\n  destroy(): void {\n    this.isMouseOver = false;\n    this.camera = null;\n    this._emitMouseMove = false;\n    this.emitter.removeAllListeners();\n    this._events = null;\n    this[\"_ray\"] = null;\n    this[\"__inner\"]._destroy();\n    this[\"__inner\"] = null;\n    this.actor.fMouseInput = null;\n    super.destroy();\n  }\n}\n\nwindow[\"fMouseInput\"] = fMouseInput;\n".replace(/reference path/gi, ""),
  defs: "// fMouseInput plugin\n// https://github.com/florentpoujol/superpowers-game-fmouseinput-plugin\n// Allows for easy setup of interactions between the mouse and actors\n\n// Documentation:\n// http://florentpoujol.github.io/superpowers-game-fmouseinput-plugin\n\n// You can also access the documentation offline in the plugin's \"public/docs\" folder \n// or via the \"Plugins documentation\" tool provided by the \"Plugins documentation\" plugin: https://github.com/florentpoujol/superpowers-common-pluginsdocs-plugin\n\n// accessible on actors throught the \"fMouseInput\" property\ndeclare class fMouseInput extends Sup.ActorComponent {\n  constructor(actor: Sup.Actor);\n\n  camera: Sup.Camera|Sup.Actor|string; // actually always return a Sup.Camera instance\n  \n  emitter: EventEmitter;\n  on(event: string, listener: Function): EventEmitter;\n  off(event: string, listener: Function): EventEmitter;\n\n  static eventsData: { [event: string]: { functionName: string, buttonId: number } };\n  isMouseOver: boolean; \n\n  destroy(): void;\n}\n",
  exposeActorComponent: { propertyName: "fMouseInput", className: "fMouseInput" }
});

},{}]},{},[1]);
