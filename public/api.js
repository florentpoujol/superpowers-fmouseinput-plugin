(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){



SupCore.system.api.registerPlugin("typescript", "fMouseInput", {
  code: "/// <reference path=\"../index.d.ts\" />\n/// <reference path=\"Sup.d.ts\" />\n\n\nclass fMouseInput extends Sup.ActorComponent {\n\n  /**\n  * Tell wether the mouse pointer is currently over the actor.\n  */\n  isMouseOver: boolean = false;\n  \n  /**\n  * The event emitter (of type EventEmitter) on which mouse input events are emitted.\n  */\n  emitter: any; // can't define as EventEmitter here...\n\n  /**\n  * The ray used for the intersection check.\n  * Set and updated by the component that is on the actor with the camera component.\n  * On other components, it is set to the ray on the camera component's\n  */\n  private _ray: Sup.Math.Ray;\n\n  // ----------------------------------------\n\n  /**\n  * @param actor - The actor to create the component on.\n  */\n  constructor(actor: Sup.Actor) {\n    super(actor);\n    this.actor.fMouseInput = this;\n\n    this[\"__inner\"] = new SupEngine.componentClasses[\"fMouseInput\"](this.actor[\"__inner\"]);\n    this[\"__inner\"].setOuter(this);\n    // __inner is the component instance on the engine side (of type \"MouseInput extends SupEngine.ActorComponent\").\n    \n    this.emitter = new window[\"EventEmitter\"]();\n\n    if (actor.camera != null) {\n      this._camera = actor.camera;\n      this._ray = new Sup.Math.Ray();\n    }\n  }\n\n  // ----------------------------------------\n\n  private _camera: Sup.Camera;\n\n  /**\n  * The camera component.\n  */\n  set camera(camera: Sup.Camera|Sup.Actor|string) {\n    let actor: Sup.Actor;\n    if (typeof camera === \"string\") {\n      let actorName = <string>camera;\n      actor = <Sup.Actor>Sup.getActor(actorName);\n      if (actor == null) {\n        console.error(\"fMouseInput.camera2 setter: actor with name '\"+actorName+\"' not found.\");\n        return;\n      }\n    }\n    else {\n      if (camera[\"camera\"] != null) { // suppose actor\n        actor = <Sup.Actor>camera;\n      }\n      else if (camera[\"actor\"] != null) // suppose camera component\n        actor = <Sup.Actor>camera[\"actor\"];\n      else {\n        // unlikely to happend but better be safe !\n        console.error(\"fMouseInput.camera setter: unable to do anything with the value.\", camera);\n        return;\n      }\n    }\n\n    if (actor.camera == null) {\n      console.error(\"fMouseInput.camera2 setter: actor with name '\"+actor.getName()+\"' has no Camera component.\");\n      return;\n    }\n\n    this._camera = actor.camera;\n    \n    if (actor.fMouseInput == null)\n      new fMouseInput(actor);\n\n    this._ray = actor.fMouseInput[\"_ray\"];\n  }\n\n  get camera(): Sup.Camera|Sup.Actor|string {\n    return this._camera; // actually always return a Sup.Camera instance\n  }\n\n  // ----------------------------------------\n\n  // called by the engine instance\n  update(): void {\n    if (this.actor.camera != null) // this component is on the same actor as the camera\n      this._ray.setFromCamera(this._camera, Sup.Input.getMousePosition());\n        \n    else if (this._ray != null) { // this component is on an actor to be checked\n      let hit = this._ray.intersectActor(this.actor)[0];\n\n      if (hit != null) {\n        if(this.isMouseOver === false) {\n          this.isMouseOver = true;\n          this.emitter.emit(\"mouseEnter\");\n        }\n      }\n      else if (this.isMouseOver === true) {\n        this.isMouseOver = false;\n        this.emitter.emit(\"mouseExit\");\n      }\n\n      if (this.isMouseOver === true) {\n        let mouseDelta = Sup.Input.getMouseDelta();\n        if (mouseDelta.x !== 0 || mouseDelta.y !== 0)\n          this.emitter.emit(\"mouseMove\");\n\n        if (Sup.Input.wasMouseButtonJustReleased(0)) {\n          this.emitter.emit(\"leftClick\");\n        }\n\n        else if (Sup.Input.wasMouseButtonJustReleased(1)) {\n          this.emitter.emit(\"middleClick\");\n        }\n\n        else if (Sup.Input.wasMouseButtonJustReleased(2)) {\n          this.emitter.emit(\"rightClick\");\n        }\n        \n        else if (Sup.Input.wasMouseButtonJustReleased(5)) {\n          this.emitter.emit(\"wheelUp\");\n        }\n\n        else if (Sup.Input.wasMouseButtonJustReleased(6)) {\n          this.emitter.emit(\"wheelDown\");\n        }\n      }\n    }\n  }\n\n  destroy(): void {\n    this.isMouseOver = false;\n    this.camera = null;\n    this[\"_ray\"] = null;\n    this.actor.fMouseInput = null;\n    this[\"__inner\"]._destroy();\n    this[\"__inner\"] = null;\n    super.destroy();\n  }\n}\n\n(<any>window).fMouseInput = fMouseInput;\n".replace(/reference path/gi, ""),
  defs: "// fMouseInput plugin\n// https://github.com/florentpoujol/superpowers-fmouseinput-plugin\n// Allows for easy setup of interactions between the mouse and actors\n\n// Documentation:\n// http://florentpoujol.github.io/superpowers-fmouseinput-plugin\n\n// You can also access the documentation offline in the plugin's \"public/docs\" folder \n// or via the \"Plugins documentation\" tool provided by the \"Plugins documentation\" plugin: https://github.com/florentpoujol/superpowers-pluginsdocumentation-plugin\n\n// accessible on actors throught the \"fMouseInput\" property\ndeclare class fMouseInput extends Sup.ActorComponent {\n  isMouseOver: boolean; \n  emitter: EventEmitter;\n  camera: Sup.Camera|Sup.Actor|string; // actually always return a Sup.Camera instance\n\n  constructor(actor: Sup.Actor);\n  update(): void;\n  destroy(): void;\n}\n",
  exposeActorComponent: { propertyName: "fMouseInput", className: "fMouseInput" }
});

},{}]},{},[1]);
